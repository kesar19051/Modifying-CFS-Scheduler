diff -rupN linux1/arch/x86/entry/syscalls/syscall_64.tbl linux-5.9/arch/x86/entry/syscalls/syscall_64.tbl
--- linux1/arch/x86/entry/syscalls/syscall_64.tbl	2020-11-12 22:29:11.164143324 +0530
+++ linux-5.9/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-12 02:45:50.000000000 +0530
@@ -404,5 +404,3 @@
 545	x32	execveat		compat_sys_execveat
 546	x32	preadv2			compat_sys_preadv64v2
 547	x32	pwritev2		compat_sys_pwritev64v2
-548	64	sh_task_info		sys_task_info
-549	64	rtnice			sys_rtnice
diff -rupN linux1/include/linux/sched.h linux-5.9/include/linux/sched.h
--- linux1/include/linux/sched.h	2020-11-12 22:33:11.216150182 +0530
+++ linux-5.9/include/linux/sched.h	2020-10-12 02:45:50.000000000 +0530
@@ -460,7 +460,6 @@ struct sched_entity {
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
-	u64				rtnice;
 
 	struct sched_statistics		statistics;
 
diff -rupN linux1/kernel/sched/core.c linux-5.9/kernel/sched/core.c
--- linux1/kernel/sched/core.c	2020-11-12 22:36:02.176155066 +0530
+++ linux-5.9/kernel/sched/core.c	2020-10-12 02:45:50.000000000 +0530
@@ -3070,7 +3070,6 @@ static void __sched_fork(unsigned long c
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
-	p->se.rtnice			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff -rupN linux1/kernel/sched/fair.c linux-5.9/kernel/sched/fair.c
--- linux1/kernel/sched/fair.c	2020-11-12 23:45:38.632274386 +0530
+++ linux-5.9/kernel/sched/fair.c	2020-10-12 02:45:50.000000000 +0530
@@ -534,10 +534,7 @@ static inline u64 min_vruntime(u64 min_v
 static inline int entity_before(struct sched_entity *a,
 				struct sched_entity *b)
 {
-	if((s64)(a->rtnice - b->rtnice)<0)
-		return true;
-	else
-		return (s64)(a->vruntime - b->vruntime) < 0;
+	return (s64)(a->vruntime - b->vruntime) < 0;
 }
 
 static void update_min_vruntime(struct cfs_rq *cfs_rq)
@@ -842,10 +839,10 @@ static void update_tg_load_avg(struct cf
 /*
  * Update the current task's runtime statistics.
  */
-static void update_curr(struct cfs_rq *cfsrq)
+static void update_curr(struct cfs_rq *cfs_rq)
 {
-	struct sched_entity *curr = cfsrq->curr;
-	u64 now = rq_clock_task(rq_of(cfsrq));
+	struct sched_entity *curr = cfs_rq->curr;
+	u64 now = rq_clock_task(rq_of(cfs_rq));
 	u64 delta_exec;
 
 	if (unlikely(!curr))
@@ -861,21 +858,10 @@ static void update_curr(struct cfs_rq *c
 		      max(delta_exec, curr->statistics.exec_max));
 
 	curr->sum_exec_runtime += delta_exec;
-	schedstat_add(cfsrq->exec_clock, delta_exec);
-	
-	if(curr->rtnice!=0){
-		if(curr->rtnice<delta_exec){
-			curr->rtnice = 0;
-			return;
-		}
-		else{
-			curr->rtnice = curr->rtnice - delta_exec;
-			return;
-		}
-	}
+	schedstat_add(cfs_rq->exec_clock, delta_exec);
 
 	curr->vruntime += calc_delta_fair(delta_exec, curr);
-	update_min_vruntime(cfsrq);
+	update_min_vruntime(cfs_rq);
 
 	if (entity_is_task(curr)) {
 		struct task_struct *curtask = task_of(curr);
@@ -885,7 +871,7 @@ static void update_curr(struct cfs_rq *c
 		account_group_exec_runtime(curtask, delta_exec);
 	}
 
-	account_cfs_rq_runtime(cfsrq, delta_exec);
+	account_cfs_rq_runtime(cfs_rq, delta_exec);
 }
 
 static void update_curr_fair(struct rq *rq)
@@ -6856,22 +6842,13 @@ static unsigned long wakeup_gran(struct
 static int
 wakeup_preempt_entity(struct sched_entity *curr, struct sched_entity *se)
 {
-	s64 gran, rtdifference = curr->rtnice - se->rtnice, vdifference = curr->vruntime - se->vruntime;
+	s64 gran, vdiff = curr->vruntime - se->vruntime;
 
-	if (rtdifference==0){
-		if(vdifference <= 0)	
-			return -1;
-	}
-	else if(vdifference <= 0){
-		if(rtdifference==0)
-			return -1;	
-	}	
-	else if (rtdifference > 0){
+	if (vdiff <= 0)
 		return -1;
-	}
+
 	gran = wakeup_gran(se);
-	
-	if (vdifference > gran)
+	if (vdiff > gran)
 		return 1;
 
 	return 0;
diff -rupN linux1/rtnice/Makefile linux-5.9/rtnice/Makefile
--- linux1/rtnice/Makefile	2020-11-12 22:27:08.188139810 +0530
+++ linux-5.9/rtnice/Makefile	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-obj-y := rtnice.o
diff -rupN linux1/rtnice/rtnice.c linux-5.9/rtnice/rtnice.c
--- linux1/rtnice/rtnice.c	2020-11-12 22:22:00.072131008 +0530
+++ linux-5.9/rtnice/rtnice.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,38 +0,0 @@
-#include <linux/kernel.h>
-#include <linux/init.h>
-#include <linux/sched.h>
-#include <linux/syscalls.h>
-#include <linux/file.h> 
-#include <linux/fs.h>
-#include <linux/fcntl.h>
-#include <linux/proc_fs.h>
-#include <linux/module.h>
-#include <linux/buffer_head.h>
-#include <asm/uaccess.h> 
-#include <uapi/asm-generic/errno-base.h>
-
-SYSCALL_DEFINE2(rtnice, long, pid, long, time) 
-{
-	if (pid > 32768 || pid <= 0)
-		return -EINVAL;
-	if(time<0)
-		return -EINVAL;
-	struct task_struct *task;
-	int flag = 0;
-	if(time<0){
-		printk("The value of soft time is invalid.");
-		return 0;
-	}
-	for_each_process(task){
-		if(pid==(long)task->pid){
-			printk("Changed rtnice value %s\n", task->comm);
-			flag = 1;
-			task->se.rtnice = time;
-		}
-	}
-	if(flag==0){
-		printk("No such process found\n");
-	}
-	printk("Syscall invoked");
-	return 0;
-}
diff -rupN linux1/rtnice.c linux-5.9/rtnice.c
--- linux1/rtnice.c	2020-11-12 22:14:33.100118238 +0530
+++ linux-5.9/rtnice.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,38 +0,0 @@
-#include <linux/kernel.h>
-#include <linux/init.h>
-#include <linux/sched.h>
-#include <linux/syscalls.h>
-#include <linux/file.h> 
-#include <linux/fs.h>
-#include <linux/fcntl.h>
-#include <linux/proc_fs.h>
-#include <linux/module.h>
-#include <linux/buffer_head.h>
-#include <asm/uaccess.h> 
-#include <uapi/asm-generic/errno-base.h>
-
-SYSCALL_DEFINE2(rtnice, long, pid, long, time) 
-{
-	if (pid > 32768 || pid <= 0)
-		return -EINVAL;
-	if(time<0)
-		return -EINVAL;
-	struct task_struct *task;
-	int flag = 0;
-	if(time<0){
-		printk("The value of soft time is invalid.");
-		return 0;
-	}
-	for_each_process(task){
-		if(pid==(long)task->pid){
-			printk("Changed rtnice value %s\n", task->comm);
-			flag = 1;
-			task->se.rtnice = time;
-		}
-	}
-	if(flag==0){
-		printk("No such process found\n");
-	}
-	printk("Syscall invoked");
-	return 0;
-}
diff -rupN linux1/sh_task_info/sh_task_info.c linux-5.9/sh_task_info/sh_task_info.c
--- linux1/sh_task_info/sh_task_info.c	2020-10-28 19:50:59.307975226 +0530
+++ linux-5.9/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,73 +0,0 @@
-#include <linux/kernel.h>
-#include <linux/init.h>
-#include <linux/sched.h>
-#include <linux/syscalls.h>
-#include <linux/file.h> 
-#include <linux/fs.h>
-#include <linux/fcntl.h>
-#include <linux/proc_fs.h>
-#include <linux/module.h>
-#include <linux/buffer_head.h> 
-#include <asm/uaccess.h> 
-#include <uapi/asm-generic/errno-base.h>
-
-SYSCALL_DEFINE2(sh_task_info, int, pid, char*, filename) 
-{
-	if (pid > 32768 || pid <= 0)
-		return -EINVAL;
-	struct task_struct *task;
-	struct file *file;
-	char data[500], concat[500];
-	loff_t pos = 0;
-
-  	file = filp_open(filename, O_WRONLY|O_CREAT, 0644);
-	for_each_process(task)
-	{
-		if ((int)task->pid == pid)
-		{
-			printk("Process: %s\n", task->comm);
-			strcpy(data, "Process: ");
-			strcat(data, task->comm);
-			strcat(data, "\n");
-			
-			printk("PID Number: %ld\n", (long)task->pid);
-			strcat(data, "PID NUmber: ");
-			sprintf(concat, "%ld\n", (long)task->pid);
-			strcat(data, concat);
-			
-			printk("Process State: %ld\n", (long)task->state);
-			strcat(data, "Process State: ");
-			sprintf(concat, "%ld\n", (long)task->state);
-			strcat(data, concat);
-			
-			printk("Priority: %ld\n", (long)task->prio);
-			strcat(data, "Priority: ");
-			sprintf(concat, "%ld\n", (long)task->prio);
-			strcat(data, concat);
-			
-			printk("RT_Priority: %ld\n", (long)task->rt_priority);
-			strcat(data, "RT_Priority: ");
-			sprintf(concat, "%ld\n", (long)task->rt_priority);
-			strcat(data, concat);
-			
-			printk("Static Priority: %ld\n", (long)task->static_prio);
-			strcat(data, "Static Priority: ");
-			sprintf(concat, "%ld\n", (long)task->static_prio);
-			strcat(data, concat);
-			
-			printk("Normal Priority: %ld\n", (long)task->normal_prio);
-			strcat(data, "Normal Priority: ");
-			sprintf(concat, "%ld\n", (long)task->normal_prio);
-			strcat(data, concat);
-			
-			printk("the data is: %s", data);
-			
-			if (file==NULL)
-				return -EISDIR;
-			kernel_write(file, data, strlen(data), &pos);
-		}
-		printk("\n\n");
-	}
-	filp_close(file, NULL);
-	return 0;
-}
